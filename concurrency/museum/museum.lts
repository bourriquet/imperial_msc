/*
Concurrency Coursework 1

Author: lc3311
Last updated: 14/02/16
*/

// Max. museum capacity
const N = 10
range P = 1..N

// Enter the museum at East turnstile
EAST = (enter -> EAST).
// Exit the museum at West turnstile
WEST = (exit -> WEST).

// Director can open or close the museum
DIRECTOR = (open -> DIRECTOR
			| close -> DIRECTOR).

/*
   Control system is a composite of two parts:
   COUNT: only permits entry when number of people in museum < N
		and only permits exit when number of people in museum > 0
   ENTRY: ensures that when the museum is closed, everyone must exit
		and people can initially only enter the museum when it is empty
*/
COUNT = COUNT[0],
COUNT[n:0..N] = (when (n==0) empty -> COUNT
				| when (n < N) enter -> COUNT[n+1]
				| when (n > 0) exit -> COUNT[n-1]
				).
ENTRY = ENTRY[0],
ENTRY[0] = (exit -> ENTRY[0]
			| empty -> ENTRY[1]),
ENTRY[1] = (enter -> ENTRY[1]
			| exit -> ENTRY[1]
			| close -> ENTRY[0]
			).
||CONTROL = (COUNT || ENTRY).

/*
   Museum is a composite of four parts
   The empty action is renamed to open to ensure synchronisation
*/
||MUSEUM = (EAST || WEST || DIRECTOR || CONTROL)/{open/empty}.


/* 
   Test function to test whether it is possible for visitors to
   enter when the museum is closed
   TEST: allows people to enter until the museum is closed, increments
   a count
   CHECK: decrements the count until the museum is empty, if people
   can enter, then an error is produced
*/
TEST = TEST[0],
TEST[i:0..N] = (when (i==0) open -> TEST[i+1]
				| when (i < N && i > 0){enter} -> TEST[i+1]
				| close -> CHECK[i]),
CHECK[i:0..N] = (when (i <= N && i > 1) exit -> CHECK[i-1]
				| when (i==1) empty -> correct -> STOP
				| enter -> error -> ERROR).
||TESTMUS = (TEST || MUSEUM).



P = STOP + {exit}.
||Q = (P || MUSEUM).

/*
Trace to DEADLOCK:
	open
	enter
	close
*/

